<?php
/**
 * –°–µ—Ä–≤–µ—Ä–Ω—ã–π endpoint –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
 * 
 * –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–Ω–µ –ø—É–±–ª–∏—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞—â–∏—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ .htaccess
 */

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS (–µ—Å–ª–∏ —Å–∞–π—Ç –Ω–∞ –¥—Ä—É–≥–æ–º –¥–æ–º–µ–Ω–µ)
header('Access-Control-Allow-Origin: https://marketfactory.su'); // –í production –∑–∞–º–µ–Ω–∏—Ç–µ * –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω!
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Content-Type: application/json; charset=utf-8');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'error' => 'Method not allowed']);
    exit;
}

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
// ============================================
$BOT_TOKEN = getenv('TELEGRAM_BOT_TOKEN');
$CHAT_ID   = getenv('TELEGRAM_CHAT_ID');

if (!$BOT_TOKEN || !$CHAT_ID) {
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error' => 'Server misconfiguration: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID not set'
    ]);
    exit;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
define('RATE_LIMIT_SECONDS', 5); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
define('MAX_MESSAGE_LENGTH', 4000); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

// ============================================
// –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏
 */
function checkRateLimit() {
    session_start();
    
    $currentTime = time();
    $lastSubmit = isset($_SESSION['last_submit']) ? $_SESSION['last_submit'] : 0;
    
    if ($currentTime - $lastSubmit < RATE_LIMIT_SECONDS) {
        return false;
    }
    
    $_SESSION['last_submit'] = $currentTime;
    return true;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function sanitizeInput($data) {
    if (is_array($data)) {
        return array_map('sanitizeInput', $data);
    }
    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
function sendToTelegram($message) {
    global $BOT_TOKEN, $CHAT_ID;
    $url = 'https://api.telegram.org/bot' . $BOT_TOKEN . '/sendMessage';
    
    $data = [
        'chat_id' => $CHAT_ID,
        'text' => $message,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true
    ];
    
    $options = [
        'http' => [
            'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
            'method'  => 'POST',
            'content' => http_build_query($data),
            'timeout' => 10
        ]
    ];
    
    $context = stream_context_create($options);
    $result = @file_get_contents($url, false, $context);
    
    if ($result === false) {
        return false;
    }
    
    $response = json_decode($result, true);
    return isset($response['ok']) && $response['ok'] === true;
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function logSubmission($message, $success) {
    $logFile = __DIR__ . '/submissions.log';
    $timestamp = date('Y-m-d H:i:s');
    $ip = $_SERVER['REMOTE_ADDR'] ?? 'unknown';
    $status = $success ? 'SUCCESS' : 'FAILED';
    
    $logEntry = "[$timestamp] [$status] IP: $ip\n";
    
    // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    // file_put_contents($logFile, $logEntry, FILE_APPEND);
}

// ============================================
// –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
// ============================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
if (!checkRateLimit()) {
    http_response_code(429);
    echo json_encode([
        'success' => false, 
        'error' => '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
    ]);
    exit;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
$rawData = file_get_contents('php://input');
$data = json_decode($rawData, true);

if (!$data || !is_array($data)) {
    http_response_code(400);
    echo json_encode(['success' => false, 'error' => 'Invalid data format']);
    exit;
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
$data = sanitizeInput($data);

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
$message = '';

if (isset($data['type'])) {
    switch ($data['type']) {
        case 'lead': // –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ —Å –º–æ–¥—É–ª—è–º–∏
            $message = "üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê</b>\n\n";
            
            if (isset($data['contact']) && !empty($data['contact'])) {
                $message .= "üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> " . $data['contact'] . "\n";
            }
            
            if (isset($data['email']) && !empty($data['email'])) {
                $message .= "üìß <b>Email:</b> " . $data['email'] . "\n";
            }
            
            if (isset($data['message']) && !empty($data['message'])) {
                $message .= "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n" . $data['message'] . "\n";
            }
            
            if (isset($data['modules']) && is_array($data['modules']) && count($data['modules']) > 0) {
                $message .= "\nüì¶ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n";
                foreach ($data['modules'] as $module) {
                    $message .= "  ‚Ä¢ " . $module . "\n";
                }
            }
            
            if (isset($data['total']) && !empty($data['total'])) {
                $message .= "\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> " . $data['total'];
            }
            break;
            
        case 'consultation': // –§–æ—Ä–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            $message = "üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ</b>\n\n";
            
            if (isset($data['name']) && !empty($data['name'])) {
                $message .= "üë§ <b>–ò–º—è:</b> " . $data['name'] . "\n";
            }
            
            if (isset($data['contact']) && !empty($data['contact'])) {
                $message .= "üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> " . $data['contact'] . "\n";
            }
            
            $message .= "\nüìç <b>–§–æ—Ä–º–∞:</b> –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Ñ—É—Ç–µ—Ä —Å–∞–π—Ç–∞)";
            break;
            
        default:
            http_response_code(400);
            echo json_encode(['success' => false, 'error' => 'Unknown form type']);
            exit;
    }
} else {
    http_response_code(400);
    echo json_encode(['success' => false, 'error' => 'Form type not specified']);
    exit;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
if (strlen($message) > MAX_MESSAGE_LENGTH) {
    http_response_code(400);
    echo json_encode(['success' => false, 'error' => 'Message too long']);
    exit;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
$success = sendToTelegram($message);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logSubmission($message, $success);

// –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
if ($success) {
    http_response_code(200);
    echo json_encode(['success' => true, 'message' => '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞']);
} else {
    http_response_code(500);
    echo json_encode(['success' => false, 'error' => '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram']);
}

