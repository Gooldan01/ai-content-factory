/**
 * –°–µ—Ä–≤–µ—Ä–Ω—ã–π endpoint –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram (Node.js)
 * 
 * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:
 * - Vercel Serverless Functions
 * - Netlify Functions
 * - AWS Lambda
 * - –õ—é–±–æ–π Node.js —Å–µ—Ä–≤–µ—Ä
 */

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø: –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
// ============================================
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
  throw new Error('Server misconfiguration: TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID are not set');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
const RATE_LIMIT_SECONDS = 5;
const MAX_MESSAGE_LENGTH = 4000;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è rate limiting (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const requestLog = new Map();

// ============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –ø–æ IP
 */
function checkRateLimit(ip) {
  const now = Date.now();
  const lastRequest = requestLog.get(ip);
  
  if (lastRequest && (now - lastRequest) < RATE_LIMIT_SECONDS * 1000) {
    return false;
  }
  
  requestLog.set(ip, now);
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  if (requestLog.size > 1000) {
    const oldestKey = requestLog.keys().next().value;
    requestLog.delete(oldestKey);
  }
  
  return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
 */
function getClientIP(req) {
  return req.headers['x-forwarded-for']?.split(',')[0] ||
         req.headers['x-real-ip'] ||
         req.connection?.remoteAddress ||
         'unknown';
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function sanitizeInput(data) {
  if (typeof data === 'string') {
    return data.trim().substring(0, 500); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
  }
  
  if (Array.isArray(data)) {
    return data.map(sanitizeInput);
  }
  
  if (typeof data === 'object' && data !== null) {
    const sanitized = {};
    for (const [key, value] of Object.entries(data)) {
      sanitized[key] = sanitizeInput(value);
    }
    return sanitized;
  }
  
  return data;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è Telegram
 */
function escapeHTML(text) {
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
  };
  return text.replace(/[&<>]/g, (m) => map[m]);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function sendToTelegram(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text: message,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });
    
    const data = await response.json();
    return data.ok === true;
  } catch (error) {
    console.error('Telegram API Error:', error);
    return false;
  }
}

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
 */
function formatMessage(data) {
  let message = '';
  
  switch (data.type) {
    case 'lead': // –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ —Å –º–æ–¥—É–ª—è–º–∏
      message = 'üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê</b>\n\n';
      
      if (data.contact) {
        message += `üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${escapeHTML(data.contact)}\n`;
      }
      
      if (data.email) {
        message += `üìß <b>Email:</b> ${escapeHTML(data.email)}\n`;
      }
      
      if (data.message) {
        message += `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${escapeHTML(data.message)}\n`;
      }
      
      if (data.modules && Array.isArray(data.modules) && data.modules.length > 0) {
        message += '\nüì¶ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n';
        data.modules.forEach(module => {
          message += `  ‚Ä¢ ${escapeHTML(module)}\n`;
        });
      }
      
      if (data.total) {
        message += `\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> ${escapeHTML(data.total)}`;
      }
      break;
      
    case 'consultation': // –§–æ—Ä–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
      message = 'üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ</b>\n\n';
      
      if (data.name) {
        message += `üë§ <b>–ò–º—è:</b> ${escapeHTML(data.name)}\n`;
      }
      
      if (data.contact) {
        message += `üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${escapeHTML(data.contact)}\n`;
      }
      
      message += '\nüìç <b>–§–æ—Ä–º–∞:</b> –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Ñ—É—Ç–µ—Ä —Å–∞–π—Ç–∞)';
      break;
      
    default:
      throw new Error('Unknown form type');
  }
  
  return message;
}

// ============================================
// –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
// ============================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
 * –î–ª—è Vercel/Netlify –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ export default
 * –î–ª—è Express –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ middleware
 */
async function handler(req, res) {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*'); // –í production –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω!
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST
  if (req.method !== 'POST') {
    res.status(405).json({ success: false, error: 'Method not allowed' });
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    const clientIP = getClientIP(req);
    
    if (!checkRateLimit(clientIP)) {
      res.status(429).json({
        success: false,
        error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
      });
      return;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const data = sanitizeInput(req.body);
    
    if (!data || !data.type) {
      res.status(400).json({
        success: false,
        error: 'Invalid data format'
      });
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = formatMessage(data);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (message.length > MAX_MESSAGE_LENGTH) {
      res.status(400).json({
        success: false,
        error: 'Message too long'
      });
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const success = await sendToTelegram(message);
    
    if (success) {
      res.status(200).json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
      });
    } else {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram'
      });
    }
    
  } catch (error) {
    console.error('Handler Error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
}

// ============================================
// –≠–ö–°–ü–û–†–¢–´
// ============================================

// –î–ª—è Vercel Serverless Functions
module.exports = handler;

// –î–ª—è ES modules (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
// export default handler;

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å Express
if (require.main === module) {
  const express = require('express');
  const app = express();
  
  app.use(express.json());
  app.post('/api/telegram', handler);
  
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    console.log(`Endpoint: http://localhost:${PORT}/api/telegram`);
  });
}

